import pygame; Life = type('Life', (object,), {'__init__': lambda self, width, height, left, top, cell_size: setattr(self, 'width', width) or setattr(self, 'height', height) or setattr(self, 'board', [[0] * width for _ in range(height)]) or setattr(self, 'left', 0) or setattr(self, 'top', 0) or setattr(self, 'cell_size', 0) or getattr(self, 'set_view')(left, top, cell_size), 'on_click': lambda self, cell: setattr(self, 'board', [[(getattr(self, 'board')[row][col] + 1) % 2 if row == cell[1] and col == cell[0] else getattr(self, 'board')[row][col] for col in range(len(getattr(self, 'board')[row]))] for row in range(len(getattr(self, 'board')))]), 'set_view': lambda self, left, top, cell_size: setattr(self, 'left', left) or setattr(self, 'top', top) or setattr(self, 'cell_size', cell_size), 'get_click': lambda self, mouse_pos: getattr(self, 'on_click')(getattr(self, 'get_cell')(mouse_pos)) if getattr(self, 'get_cell')(mouse_pos) else None, 'get_cell': lambda self, mouse_pos: None if (mouse_pos[0] - getattr(self, 'left', 0)) // getattr(self, 'cell_size', 0) < 0 or (mouse_pos[0] - getattr(self, 'left', 0)) // getattr(self, 'cell_size', 0) >= getattr(self, 'width', 0) or (mouse_pos[1] - getattr(self, 'top', 0)) // getattr(self, 'cell_size', 0) < 0 or (mouse_pos[1] - getattr(self, 'top', 0)) // getattr(self, 'cell_size', 0) >= getattr(self, 'height', 0) else ((mouse_pos[0] - getattr(self, 'left', 0)) // getattr(self, 'cell_size', 0), (mouse_pos[1] - getattr(self, 'top', 0)) // getattr(self, 'cell_size', 0)), 'render': lambda self, screen: [pygame.draw.rect(screen, pygame.Color("green"), (x * getattr(self, 'cell_size', 0) + getattr(self, 'left', 0), y * getattr(self, 'cell_size', 0) + getattr(self, 'top', 0), getattr(self, 'cell_size', 0), getattr(self, 'cell_size', 0))) if getattr(self, 'board')[y][x] else None or pygame.draw.rect(screen, pygame.Color(255, 255, 255), (x * getattr(self, 'cell_size', 0) + getattr(self, 'left', 0), y * getattr(self, 'cell_size', 0) + getattr(self, 'top', 0), getattr(self, 'cell_size', 0), getattr(self, 'cell_size')), 1) for y in range(getattr(self, 'height')) for x in range(getattr(self, 'width'))], 'next_move': lambda self: setattr(self, 'board', [[1 if (s := sum(getattr(self, 'board')[(y + dy) % getattr(self, 'height')][(x + dx) % getattr(self, 'width')] for dy in range(-1, 2) for dx in range(-1, 2)) - getattr(self, 'board')[y][x]) == 3 or (s == 2 and getattr(self, 'board')[y][x] == 1) else 0 for x in range(getattr(self, 'width'))] for y in range(getattr(self, 'height'))])}); pygame.init(); size = 1000, 500; screen = pygame.display.set_mode(size); clock = pygame.time.Clock(); board = Life(60, 30, 10, 10, 15); time_on = False; ticks = 0; speed = 10; running = True
while running: screen.fill((0, 0, 0)); board.render(screen); board.next_move() if ticks >= speed and time_on else None; ticks = 0 if ticks >= speed else ticks; pygame.display.flip(); clock.tick(100); ticks += 1; [(running := False if event.type == pygame.QUIT else running, board.get_click(event.pos) if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1 else None, time_on := not time_on if (event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE or event.type == pygame.MOUSEBUTTONDOWN and event.button == 3) else time_on, speed := speed + 1 if event.type == pygame.MOUSEBUTTONDOWN and event.button == 4 else speed, speed := speed - 1 if event.type == pygame.MOUSEBUTTONDOWN and event.button == 5 else speed, pygame.quit() if event.type == pygame.QUIT else None) for event in pygame.event.get()]
